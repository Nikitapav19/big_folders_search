import os
import sys
import subprocess
from PyQt5.QtWidgets import (QApplication, QMainWindow, QWidget, QVBoxLayout, QHBoxLayout,
                             QLabel, QLineEdit, QPushButton, QProgressBar, QFileDialog,
                             QListWidget, QSpinBox, QCheckBox, QListWidgetItem,
                             QComboBox, QDoubleSpinBox)
from PyQt5.QtCore import Qt, QThread, pyqtSignal
from PyQt5.QtGui import QColor, QBrush, QFont


"""
–ü—Ä–æ–≥—Ä–∞–º–º–∞ –ø–æ–º–æ–≥–∞–µ—Ç –æ—á–∏—Å—Ç–∏—Ç—å –º–µ—Å—Ç–æ —Å –∫–æ–º–ø–∞
–ò–Ω–æ–≥–¥–∞ –≥–¥–µ-—Ç–æ –≥–ª—É–±–æ–∫–æ –≤ –ø–∞–ø–∫–∞—Ö —Ö—Ä–∞–Ω—è—Ç—Å—è –±–æ–ª—å—à–µ —Ñ–∞–π–ª—ã –æ –∫–æ—Ç–æ—Ä—ã—Ö –º—ã –¥–∞–∂–µ –Ω–µ –∑–Ω–∞–µ–º –∏ –≤–æ—Ç —è —Ç—É—Ç —á—Ç–æ–±—ã –ø–æ–º–æ—á—å!
–°–ø–∞—Å–∏–±–æ –∑–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É! –£–¥–∞—á–∏ :D
"""


class FolderScanner(QThread):
    """
    –ö–ª–∞—Å—Å –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–∞–ø–æ–∫ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –ø–∞–ø–∫–∏, –ø—Ä–µ–≤—ã—à–∞—é—â–∏–µ –∑–∞–¥–∞–Ω–Ω—ã–π —Ä–∞–∑–º–µ—Ä
    """
    progress_updated = pyqtSignal(int, int)  # current, total - –ø—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    folder_found = pyqtSignal(str, float, bool)  # path, size, is_top_level - –Ω–∞–π–¥–µ–Ω–Ω–∞—è –ø–∞–ø–∫–∞
    total_size_calculated = pyqtSignal(float)  # –æ–±—â–∏–π —Ä–∞–∑–º–µ—Ä —Å–∫–∞–Ω–∏—Ä—É–µ–º–æ–π –ø–∞–ø–∫–∏
    error_occurred = pyqtSignal(str)  # –æ—à–∏–±–∫–∏ –ø—Ä–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–∏
    scan_complete = pyqtSignal()  # —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è

    def __init__(self, root_path, min_size_gb, skip_hidden=False):
        super().__init__()
        self.root_path = os.path.normpath(root_path)
        self.min_size_gb = min_size_gb
        self.skip_hidden = skip_hidden
        self.running = True  # —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.total_folders = 0  # –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫
        self.processed_folders = 0  # –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏

    def run(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        try:
            # –ü–æ–¥—Å—á–µ—Ç –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫ –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
            self.count_folders(self.root_path)

            # –ë—ã—Å—Ç—Ä—ã–π —Ä–∞—Å—á–µ—Ç –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–∏
            total_size = self.fast_get_folder_size(self.root_path)
            self.total_size_calculated.emit(total_size / (1024 ** 3))  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ì–ë

            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞–ø–∫–∏ –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è (–Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –≤ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ)
            top_level_folders = set()
            with os.scandir(self.root_path) as it:
                for entry in it:
                    if entry.is_dir() and not (self.skip_hidden and entry.name.startswith('.')):
                        top_level_folders.add(os.path.normpath(entry.path))

            # –û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            for dirpath, dirnames, filenames in os.walk(self.root_path):
                if not self.running:  # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–ª–∞–≥–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
                    return

                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞ –ø–∞–ø–∫–æ–π –ø–µ—Ä–≤–æ–≥–æ —É—Ä–æ–≤–Ω—è
                is_top_level = os.path.normpath(dirpath) in top_level_folders

                try:
                    # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–∞–ø–∫–∏ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏–µ
                    folder_size = self.fast_get_folder_size(dirpath)
                    if folder_size >= self.min_size_gb * (1024 ** 3):
                        size_gb = folder_size / (1024 ** 3)  # –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –ì–ë
                        self.folder_found.emit(dirpath, size_gb, is_top_level)
                except Exception as e:
                    self.error_occurred.emit(str(e))

                # –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å
                self.processed_folders += 1
                self.progress_updated.emit(self.processed_folders, self.total_folders)

            # –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            self.scan_complete.emit()

        except Exception as e:
            self.error_occurred.emit(str(e))

    def count_folders(self, start_path):
        """–†–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫"""
        self.total_folders = 0
        for root, dirs, files in os.walk(start_path):
            if not self.running:
                return
            self.total_folders += len(dirs)

    def fast_get_folder_size(self, path):
        """–ë—ã—Å—Ç—Ä–æ–µ –≤—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞ –ø–∞–ø–∫–∏ (—Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ)"""
        total_size = 0
        try:
            with os.scandir(path) as it:
                for entry in it:
                    if not self.running:
                        return 0
                    try:
                        if entry.is_file():
                            total_size += entry.stat().st_size  # —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞
                        elif entry.is_dir():
                            # —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä –ø–æ–¥–ø–∞–ø–∫–∏
                            total_size += self.fast_get_folder_size(entry.path)
                    except:
                        continue  # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –¥–æ—Å—Ç—É–ø–∞
        except:
            return 0  # –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º 0
        return total_size

    def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.running = False


class MainWindow(QMainWindow):
    """
    –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–æ–º
    """

    def __init__(self):
        super().__init__()
        self.scanner = None  # –æ–±—ä–µ–∫—Ç —Å–∫–∞–Ω–µ—Ä–∞
        self.all_folders = []  # —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–∞–ø–æ–∫
        self.initUI()  # –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    def initUI(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞
        self.setWindowTitle('–ë–æ–ª—å—à–∏–µ –ø–∞–ø–∫–∏')
        self.setGeometry(100, 100, 1000, 700)
        self.setMinimumSize(800, 600)

        # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π –≤–∏–¥–∂–µ—Ç
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        layout = QVBoxLayout(central_widget)
        layout.setSpacing(10)  # —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –º–µ–∂–¥—É —ç–ª–µ–º–µ–Ω—Ç–∞–º–∏

        # 1. –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîç –ü–æ–∏—Å–∫ –±–æ–ª—å—à–∏—Ö –ø–∞–ø–æ–∫")
        title.setStyleSheet("font-size: 18px; font-weight: bold;")
        layout.addWidget(title)

        # 2. –í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        path_layout = QHBoxLayout()
        path_label = QLabel("üìÇ –ü–∞–ø–∫–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
        self.path_edit = QLineEdit()
        self.path_edit.setPlaceholderText("–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–û–±–∑–æ—Ä'")
        self.path_edit.setStyleSheet("padding: 5px;")

        path_btn = QPushButton("üåê –û–±–∑–æ—Ä...")
        path_btn.setStyleSheet("padding: 5px; background: #4CAF50; color: white;")
        path_btn.clicked.connect(self.select_folder)

        path_layout.addWidget(path_label)
        path_layout.addWidget(self.path_edit)
        path_layout.addWidget(path_btn)

        # 3. –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        settings_layout = QHBoxLayout()

        # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä
        size_layout = QHBoxLayout()
        size_label = QLabel("üìè –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä:")
        self.size_spin = QSpinBox()
        self.size_spin.setRange(1, 1000)
        self.size_spin.setValue(1)
        self.size_spin.setStyleSheet("padding: 5px; width: 80px;")
        size_unit = QLabel("–ì–ë")

        size_layout.addWidget(size_unit)

        # –ü—Ä–æ–ø—É—Å–∫ —Å–∫—Ä—ã—Ç—ã—Ö –ø–∞–ø–æ–∫
        self.skip_hidden_check = QCheckBox("üëª –ü—Ä–æ–ø—É—Å–∫–∞—Ç—å —Å–∫—Ä—ã—Ç—ã–µ –ø–∞–ø–∫–∏")
        self.skip_hidden_check.setChecked(True)

        settings_layout.addWidget(size_label)
        settings_layout.addWidget(self.size_spin)
        settings_layout.addLayout(size_layout)
        settings_layout.addStretch()
        settings_layout.addWidget(self.skip_hidden_check)

        # 4. –ü—Ä–æ–≥—Ä–µ—Å—Å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.progress = QProgressBar()
        self.progress.setAlignment(Qt.AlignCenter)
        self.progress.setValue(0)
        self.progress.setFormat("–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
        self.progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid grey;
                border-radius: 5px;
                text-align: center;
                padding: 1px;
                height: 20px;
            }
            QProgressBar::chunk {
                background-color: #05B8CC;
                width: 10px;
            }
        """)

        # 5. –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–±—â–µ–º —Ä–∞–∑–º–µ—Ä–µ
        self.total_size_label = QLabel("üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: –Ω–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ")
        self.total_size_label.setAlignment(Qt.AlignRight)
        self.total_size_label.setStyleSheet("font-weight: bold; color: #333;")

        # 6. –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        controls_layout = QHBoxLayout()

        self.scan_btn = QPushButton("üöÄ –ù–∞—á–∞—Ç—å —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.scan_btn.setStyleSheet("""
            QPushButton {
                padding: 8px;
                background: #4CAF50;
                color: white;
                font-weight: bold;
                border-radius: 5px;
            }
            QPushButton:hover {
                background: #45a049;
            }
            QPushButton:disabled {
                background: #cccccc;
            }
        """)
        self.scan_btn.clicked.connect(self.start_scan)

        self.stop_btn = QPushButton("‚èπ –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å")
        self.stop_btn.setEnabled(False)
        self.stop_btn.setStyleSheet("""
            QPushButton {
                padding: 8px;
                background: #f44336;
                color: white;
                border-radius: 5px;
            }
            QPushButton:hover {
                background: #d32f2f;
            }
            QPushButton:disabled {
                background: #cccccc;
            }
        """)
        self.stop_btn.clicked.connect(self.stop_scan)

        controls_layout.addWidget(self.scan_btn)
        controls_layout.addWidget(self.stop_btn)
        controls_layout.addStretch()

        # 7. –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        filter_layout = QHBoxLayout()
        filter_label = QLabel("üîß –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞:")
        self.filter_combo = QComboBox()
        self.filter_combo.addItems([
            "üåÄ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Ä—è–¥–æ–∫",
            "‚¨áÔ∏è –ü–æ —Ä–∞–∑–º–µ—Ä—É (—É–±—ã–≤.)",
            "‚¨ÜÔ∏è –ü–æ —Ä–∞–∑–º–µ—Ä—É (–≤–æ–∑—Ä.)",
            "üî§ –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É"
        ])
        self.filter_combo.setEnabled(False)
        self.filter_combo.setStyleSheet("padding: 5px;")
        self.filter_combo.currentIndexChanged.connect(self.apply_filter)

        filter_layout.addWidget(filter_label)
        filter_layout.addWidget(self.filter_combo)
        filter_layout.addStretch()

        # 8. –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        results_label = QLabel("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
        results_label.setStyleSheet("font-weight: bold;")

        self.results_list = QListWidget()
        self.results_list.setFont(QFont("Consolas", 10))
        self.results_list.setStyleSheet("""
            QListWidget {
                background: #f9f9f9;
                border: 1px solid #ddd;
                border-radius: 5px;
                padding: 5px;
            }
            QListWidget::item {
                padding: 5px;
                border-bottom: 1px solid #eee;
            }
            QListWidget::item:hover {
                background: #e6f7ff;
            }
        """)
        self.results_list.itemDoubleClicked.connect(self.open_folder)

        # –°–±–æ—Ä–∫–∞ –≤—Å–µ—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        layout.addLayout(path_layout)
        layout.addLayout(settings_layout)
        layout.addWidget(self.progress)
        layout.addWidget(self.total_size_label)
        layout.addLayout(controls_layout)
        layout.addLayout(filter_layout)
        layout.addWidget(results_label)
        layout.addWidget(self.results_list)

    def select_folder(self):
        """–í—ã–±–æ—Ä –ø–∞–ø–∫–∏ –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        folder = QFileDialog.getExistingDirectory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
        if folder:
            self.path_edit.setText(folder)

    def start_scan(self):
        """–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ—Å—Å–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scanner and self.scanner.isRunning():
            return  # —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ —É–∂–µ –∏–¥–µ—Ç

        # –ü–æ–ª—É—á–∞–µ–º –∏ –æ—á–∏—â–∞–µ–º –ø—É—Ç—å
        path = self.path_edit.text().strip()

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –ø—É—Å—Ç–æ–π –ø—É—Ç—å
        if not path:
            self.show_error("–ü–æ–ª–µ –ø—É—Ç–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º!")
            return

        # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–∞–ø–∫–∏
        if not os.path.isdir(path):
            self.show_error("–£–∫–∞–∑–∞–Ω–Ω–∞—è –ø–∞–ø–∫–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç!")
            return

        # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–µ—Ä–µ–¥ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ–º
        self.results_list.clear()
        self.all_folders = []
        self.progress.setValue(0)
        self.progress.setFormat("–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞...")
        self.total_size_label.setText("üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: –≤—ã—á–∏—Å–ª—è–µ—Ç—Å—è...")
        self.filter_combo.setEnabled(False)

        # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å–∫–∞–Ω–µ—Ä
        self.scanner = FolderScanner(
            path,
            self.size_spin.value(),
            self.skip_hidden_check.isChecked()
        )

        # –ü–æ–¥–∫–ª—é—á–∞–µ–º —Å–∏–≥–Ω–∞–ª—ã —Å–∫–∞–Ω–µ—Ä–∞ –∫ —Å–ª–æ—Ç–∞–º
        self.scanner.progress_updated.connect(self.update_progress)
        self.scanner.folder_found.connect(self.add_folder_data)
        self.scanner.total_size_calculated.connect(self.show_total_size)
        self.scanner.error_occurred.connect(self.show_error)
        self.scanner.scan_complete.connect(self.on_scan_complete)
        self.scanner.finished.connect(self.scan_finished)

        # –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ –≤–æ –≤—Ä–µ–º—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        self.scan_btn.setEnabled(False)
        self.stop_btn.setEnabled(True)

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫–∞–Ω–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        self.scanner.start()

    def stop_scan(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        if self.scanner and self.scanner.isRunning():
            self.scanner.stop()  # —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏
            self.scanner.wait()  # –∂–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –ø–æ—Ç–æ–∫–∞
        self.scan_finished()

    def scan_finished(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.scan_btn.setEnabled(True)
        self.stop_btn.setEnabled(False)
        self.progress.setFormat("–°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

    def on_scan_complete(self):
        """–î–µ–π—Å—Ç–≤–∏—è –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.filter_combo.setEnabled(True)
        self.apply_filter(0)  # –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ

    def update_progress(self, current, total):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞"""
        self.progress.setMaximum(total)
        self.progress.setValue(current)

        # –ö—Ä–∞—Å–∏–≤–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        percent = int((current / total) * 100) if total > 0 else 0
        self.progress.setFormat(f"üîç –°–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ: {current}/{total} –ø–∞–ø–æ–∫ ({percent}%)")

    def add_folder_data(self, path, size, is_top_level):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–π–¥–µ–Ω–Ω–æ–π –ø–∞–ø–∫–∏ –≤ —Å–ø–∏—Å–æ–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–ø–∫–∏
        self.all_folders.append((path, size, is_top_level))

        # –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç —Å–ø–∏—Å–∫–∞
        item = QListWidgetItem(f"{path} - {size:.2f} –ì–ë")

        # –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –¥–æ—á–µ—Ä–Ω–∏—Ö –ø–∞–ø–æ–∫ —Å–µ—Ä—ã–º —Ü–≤–µ—Ç–æ–º
        if not is_top_level:
            item.setForeground(QBrush(QColor(120, 120, 120)))

        self.results_list.addItem(item)

    def apply_filter(self, index):
        """–ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞ –∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º"""
        self.results_list.clear()

        # –†–∞–∑–¥–µ–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –∏ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏
        parent_folders = [f for f in self.all_folders if f[2]]  # is_top_level=True
        child_folders = [f for f in self.all_folders if not f[2]]  # is_top_level=False

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–µ –ø–∞–ø–∫–∏ —Å–æ–≥–ª–∞—Å–Ω–æ –≤—ã–±—Ä–∞–Ω–Ω–æ–º—É —Ñ–∏–ª—å—Ç—Ä—É
        if index == 1:  # –ü–æ —Ä–∞–∑–º–µ—Ä—É (—É–±—ã–≤.)
            parent_folders.sort(key=lambda x: -x[1])
        elif index == 2:  # –ü–æ —Ä–∞–∑–º–µ—Ä—É (–≤–æ–∑—Ä.)
            parent_folders.sort(key=lambda x: x[1])
        elif index == 3:  # –ü–æ –∞–ª—Ñ–∞–≤–∏—Ç—É
            parent_folders.sort(key=lambda x: x[0].lower())

        # –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∏–µ—Ä–∞—Ä—Ö–∏—é –ø–∞–ø–æ–∫
        for path, size, _ in parent_folders:
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫—É—é –ø–∞–ø–∫—É
            item = QListWidgetItem(f"{path} - {size:.2f} –ì–ë")
            self.results_list.addItem(item)

            # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–æ—á–µ—Ä–Ω–∏–µ –ø–∞–ø–∫–∏
            for child_path, child_size, _ in child_folders:
                if child_path.startswith(path + os.sep):
                    child_item = QListWidgetItem(f"  ‚îú‚îÄ {child_path} - {child_size:.2f} –ì–ë")
                    child_item.setForeground(QBrush(QColor(120, 120, 120)))
                    self.results_list.addItem(child_item)

    def show_total_size(self, size_gb):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ–±—â–µ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ —Å–∫–∞–Ω–∏—Ä—É–µ–º–æ–π –ø–∞–ø–∫–∏"""
        self.total_size_label.setText(f"üíæ –û–±—â–∏–π —Ä–∞–∑–º–µ—Ä: {size_gb:.2f} –ì–ë")

    def show_error(self, message):
        """–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –æ—à–∏–±–∫–∏ –≤ —Å–ø–∏—Å–∫–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        item = QListWidgetItem(f"‚ùå –û—à–∏–±–∫–∞: {message}")
        item.setForeground(QBrush(QColor(255, 0, 0)))
        self.results_list.addItem(item)

    def open_folder(self, item):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ –ø–∞–ø–∫–∏ –≤ –ø—Ä–æ–≤–æ–¥–Ω–∏–∫–µ"""
        text = item.text().strip()
        if text.startswith("‚ùå –û—à–∏–±–∫–∞:"):
            return

        path = item.text().split(" - ")[0].strip()
        if '‚îú‚îÄ' in path:  # –§–∏–∫—Å–∏—Ç –æ—Ç–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–ø–∞–ø–æ–∫
            path = path.split('‚îú‚îÄ')[1].strip()
        if os.path.exists(path):
            try:
                if sys.platform == 'win32':
                    os.startfile(path)
                elif sys.platform == 'darwin':
                    subprocess.run(['open', path])
                else:
                    subprocess.run(['xdg-open', path])
            except Exception as e:
                self.show_error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å –ø–∞–ø–∫—É: {str(e)}")
        else:
            self.show_error(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {path}")

    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –æ–∫–Ω–∞"""
        self.stop_scan()  # –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏
        event.accept()


if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º –∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = QApplication(sys.argv)
    app.setStyle('Fusion')  # —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞

    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
    window = MainWindow()
    window.show()

    # –ó–∞–ø—É—Å–∫–∞–µ–º –≥–ª–∞–≤–Ω—ã–π —Ü–∏–∫–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    sys.exit(app.exec_())